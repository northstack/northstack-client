#!/bin/bash

set -eu

if wp core version ; then
    echo "WordPress core already downloaded"
else
    wp core download \
        --version="$FRAMEWORK_VERSION"
fi

echo -n "Waiting for MySQL to be up and reachable"
while [[ ${tries:=0} -lt 30 ]]; do
    {
    mysql \
        -h "$WORDPRESS_DB_HOST" \
        -u "$WORDPRESS_DB_USER" \
        -p"$WORDPRESS_DB_PASSWORD" \
        -e 'SELECT NOW();' \
        "$WORDPRESS_DB_NAME" \
    &> /dev/null && break
    } || true
    tries=$((tries + 1))
    echo -n .
    sleep 1
done
echo

if [[ ! -e wp-config.php ]]; then
    echo "Creating wp-config file"

    cp /wp-config-overrides.php wp-config-overrides.php

    wp config create \
        --dbname="$WORDPRESS_DB_NAME" \
        --dbuser="$WORDPRESS_DB_USER" \
        --dbpass="$WORDPRESS_DB_PASSWORD" \
        --dbhost="$WORDPRESS_DB_HOST" \
        --extra-php \
<< EOF
include __DIR__ . '/wp-config-overrides.php';
EOF

    wp config set --raw DB_HOST "getenv('WORDPRESS_DB_HOST') ?: '127.0.0.1:$EXPOSE_MYSQL_PORT'"
fi

if wp core is-installed ; then
    echo "WordPress is already installed"
else
    echo "Installing WordPress"
    wp core install \
        --url="$WORDPRESS_URL" \
        --title="$WORDPRESS_TITLE" \
        --admin_user="$WORDPRESS_ADMIN_USER" \
        --admin_email="$WORDPRESS_ADMIN_EMAIL" \
        --admin_password="$WORDPRESS_ADMIN_PASS" \
        --skip-email \
        --allow-root
fi

admin_id=$(
    wp user list \
        --user_email="$WORDPRESS_ADMIN_EMAIL" \
        --user_login="$WORDPRESS_ADMIN_USER" \
        --field=ID
)

echo "Resetting the admin user's password (ID: $admin_id)"

wp user update \
    "$admin_id" \
    --user_pass="$WORDPRESS_ADMIN_PASS" \
    --skip-email

echo "Updating home+siteurl to $WORDPRESS_URL"
wp option update home "$WORDPRESS_URL"
wp option update siteurl "$WORDPRESS_URL"

echo "Creating wp-cli config file"

cat << EOF > wp-cli.yml
---
@docker:
  ssh: "docker:$(hostname)"
@local:
  ssh: ~

EOF

pushd ..
if [[ -x build ]]; then
    echo "Executing user build script"
    set +eu
    ./build
    set -eu
    code=$?
    if [[ $code -ne 0 ]]; then
        echo "User build script exited non-zero: $code"
        exit $code
    fi
else
    echo "No user build script found; we're all done!"
fi
popd

touch /tmp/.finished

while true; do sleep 1; done
